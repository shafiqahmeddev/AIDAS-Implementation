name: AIDAS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with Black
      run: |
        black --check .
    
    - name: Type checking with mypy
      run: |
        mypy --install-types --non-interactive aidas_protocol.py interactive_demo.py || true
    
    - name: Run tests with pytest
      run: |
        # Create tests directory if it doesn't exist
        mkdir -p tests
        # Create a basic test file if none exist
        if [ ! -f tests/test_basic.py ]; then
          echo "import sys" > tests/test_basic.py
          echo "sys.path.insert(0, '.')" >> tests/test_basic.py
          echo "def test_import():" >> tests/test_basic.py
          echo "    import aidas_protocol" >> tests/test_basic.py
          echo "    import interactive_demo" >> tests/test_basic.py
          echo "    assert True" >> tests/test_basic.py
        fi
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
    
    - name: Check dependencies for vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json || true

  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install documentation tools
      run: |
        pip install sphinx sphinx-rtd-theme mkdocs mkdocs-material
    
    - name: Build documentation
      run: |
        # Create docs directory if it doesn't exist
        mkdir -p docs
        # Add a simple index if none exists
        if [ ! -f docs/index.md ]; then
          cp README.md docs/index.md
        fi
        # Try to build with mkdocs
        echo "site_name: AIDAS Documentation" > mkdocs.yml
        echo "theme: material" >> mkdocs.yml
        mkdocs build || true
